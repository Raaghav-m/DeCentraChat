{
  "address": "0x80bda8037dB200463759a22cAe3a6314b3C91F16",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "rootHash",
          "type": "string"
        }
      ],
      "name": "addRootHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRootHashes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getRootHashesForUser",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4dfa788664bc56ddc05989a6c7013b1dc9b4456bfcd4ddb20239258178028f85",
  "receipt": {
    "to": null,
    "from": "0x5d0655b8D44A7FA3a8fc7ff3846d971397eA21B1",
    "contractAddress": "0x80bda8037dB200463759a22cAe3a6314b3C91F16",
    "transactionIndex": 130,
    "gasUsed": "525622",
    "logsBloom": "0x
    "blockHash": "0x169625bf2e6a614ca84d216db765a633a996a507ec22f035dafb670c5e1d3c31",
    "transactionHash": "0x4dfa788664bc56ddc05989a6c7013b1dc9b4456bfcd4ddb20239258178028f85",
    "logs": [],
    "blockNumber": 2313682,
    "cumulativeGasUsed": "3400245",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "57388336b1d87a1b28fd8254dae4e5b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"rootHash\",\"type\":\"string\"}],\"name\":\"addRootHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRootHashes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRootHashesForUser\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RootHashStorage.sol\":\"RootHashStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RootHashStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract RootHashStorage {\\n\\n    // Mapping to store the list of root hashes for each user\\n    mapping(address => string[]) private userRootHashes;\\n\\n    // Event to log when a new root hash is added\\n\\n    // Function to add a root hash for the caller (user)\\n    function addRootHash(string memory rootHash) public {\\n        require(bytes(rootHash).length > 0, \\\"Root hash cannot be empty\\\");\\n\\n        // Adding the root hash to the user's list\\n        userRootHashes[msg.sender].push(rootHash);\\n\\n        // Emit an event that a root hash was added\\n    }\\n\\n    // Function to get all root hashes for the caller (user)\\n    function getRootHashes() public view returns (string[] memory) {\\n        return userRootHashes[msg.sender];\\n    }\\n\\n    // Function to get all root hashes for a specific user\\n    function getRootHashesForUser(address user) public view returns (string[] memory) {\\n        return userRootHashes[user];\\n    }\\n}\\n\",\"keccak256\":\"0xa4b0f2f31014363a44e5b1b86a4a898dc795a99d52bc3ce2a6efbc173a5b4322\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610892806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632a921c35146100465780638b4a6fbc14610062578063c832fe5f14610092575b600080fd5b610060600480360381019061005b91906104e4565b6100b0565b005b61007c600480360381019061007791906104bb565b61016f565b6040516100899190610627565b60405180910390f35b61009a610286565b6040516100a79190610627565b60405180910390f35b60008151116100f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100eb90610649565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061016b92919061039b565b5050565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561027b5783829060005260206000200180546101ee906107a4565b80601f016020809104026020016040519081016040528092919081815260200182805461021a906107a4565b80156102675780601f1061023c57610100808354040283529160200191610267565b820191906000526020600020905b81548152906001019060200180831161024a57829003601f168201915b5050505050815260200190600101906101cf565b505050509050919050565b60606000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610392578382906000526020600020018054610305906107a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610331906107a4565b801561037e5780601f106103535761010080835404028352916020019161037e565b820191906000526020600020905b81548152906001019060200180831161036157829003601f168201915b5050505050815260200190600101906102e6565b50505050905090565b8280546103a7906107a4565b90600052602060002090601f0160209004810192826103c95760008555610410565b82601f106103e257805160ff1916838001178555610410565b82800160010185558215610410579182015b8281111561040f5782518255916020019190600101906103f4565b5b50905061041d9190610421565b5090565b5b8082111561043a576000816000905550600101610422565b5090565b600061045161044c8461069a565b610669565b90508281526020810184848401111561046957600080fd5b610474848285610762565b509392505050565b60008135905061048b81610845565b92915050565b600082601f8301126104a257600080fd5b81356104b284826020860161043e565b91505092915050565b6000602082840312156104cd57600080fd5b60006104db8482850161047c565b91505092915050565b6000602082840312156104f657600080fd5b600082013567ffffffffffffffff81111561051057600080fd5b61051c84828501610491565b91505092915050565b600061053183836105ae565b905092915050565b6000610544826106da565b61054e81856106fd565b935083602082028501610560856106ca565b8060005b8581101561059c578484038952815161057d8582610525565b9450610588836106f0565b925060208a01995050600181019050610564565b50829750879550505050505092915050565b60006105b9826106e5565b6105c3818561070e565b93506105d3818560208601610771565b6105dc81610834565b840191505092915050565b60006105f460198361071f565b91507f526f6f7420686173682063616e6e6f7420626520656d707479000000000000006000830152602082019050919050565b600060208201905081810360008301526106418184610539565b905092915050565b60006020820190508181036000830152610662816105e7565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156106905761068f610805565b5b8060405250919050565b600067ffffffffffffffff8211156106b5576106b4610805565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061073b82610742565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561078f578082015181840152602081019050610774565b8381111561079e576000848401525b50505050565b600060028204905060018216806107bc57607f821691505b602082108114156107d0576107cf6107d6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61084e81610730565b811461085957600080fd5b5056fea26469706673582212205faff3c4f80007f922d5d26cf4b434c15b506b7526ab77c2ea61c8626838817d64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632a921c35146100465780638b4a6fbc14610062578063c832fe5f14610092575b600080fd5b610060600480360381019061005b91906104e4565b6100b0565b005b61007c600480360381019061007791906104bb565b61016f565b6040516100899190610627565b60405180910390f35b61009a610286565b6040516100a79190610627565b60405180910390f35b60008151116100f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100eb90610649565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061016b92919061039b565b5050565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561027b5783829060005260206000200180546101ee906107a4565b80601f016020809104026020016040519081016040528092919081815260200182805461021a906107a4565b80156102675780601f1061023c57610100808354040283529160200191610267565b820191906000526020600020905b81548152906001019060200180831161024a57829003601f168201915b5050505050815260200190600101906101cf565b505050509050919050565b60606000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610392578382906000526020600020018054610305906107a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610331906107a4565b801561037e5780601f106103535761010080835404028352916020019161037e565b820191906000526020600020905b81548152906001019060200180831161036157829003601f168201915b5050505050815260200190600101906102e6565b50505050905090565b8280546103a7906107a4565b90600052602060002090601f0160209004810192826103c95760008555610410565b82601f106103e257805160ff1916838001178555610410565b82800160010185558215610410579182015b8281111561040f5782518255916020019190600101906103f4565b5b50905061041d9190610421565b5090565b5b8082111561043a576000816000905550600101610422565b5090565b600061045161044c8461069a565b610669565b90508281526020810184848401111561046957600080fd5b610474848285610762565b509392505050565b60008135905061048b81610845565b92915050565b600082601f8301126104a257600080fd5b81356104b284826020860161043e565b91505092915050565b6000602082840312156104cd57600080fd5b60006104db8482850161047c565b91505092915050565b6000602082840312156104f657600080fd5b600082013567ffffffffffffffff81111561051057600080fd5b61051c84828501610491565b91505092915050565b600061053183836105ae565b905092915050565b6000610544826106da565b61054e81856106fd565b935083602082028501610560856106ca565b8060005b8581101561059c578484038952815161057d8582610525565b9450610588836106f0565b925060208a01995050600181019050610564565b50829750879550505050505092915050565b60006105b9826106e5565b6105c3818561070e565b93506105d3818560208601610771565b6105dc81610834565b840191505092915050565b60006105f460198361071f565b91507f526f6f7420686173682063616e6e6f7420626520656d707479000000000000006000830152602082019050919050565b600060208201905081810360008301526106418184610539565b905092915050565b60006020820190508181036000830152610662816105e7565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156106905761068f610805565b5b8060405250919050565b600067ffffffffffffffff8211156106b5576106b4610805565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061073b82610742565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561078f578082015181840152602081019050610774565b8381111561079e576000848401525b50505050565b600060028204905060018216806107bc57607f821691505b602082108114156107d0576107cf6107d6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61084e81610730565b811461085957600080fd5b5056fea26469706673582212205faff3c4f80007f922d5d26cf4b434c15b506b7526ab77c2ea61c8626838817d64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/RootHashStorage.sol:RootHashStorage",
        "label": "userRootHashes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}